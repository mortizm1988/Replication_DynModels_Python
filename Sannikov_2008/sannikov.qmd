---
title: "Replication: Dynamic Contracting in Continuous Time"
date: last-modified
date-format: long
author:
  - name: Marcelo Ortiz M.
    affiliations:
      name: Universitat Pompeu Fabra
format:
  html: 
    toc: true
    toc-location: left
    link-external-icon: true
    link-external-newwindow: true
    smooth-scroll: true
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    fig-width: 8
    fig-height: 6
    df-print: paged

embed-resources: true
execute:
  echo: true
  warning: false
  message: false
  error: false

---

# State Variable

The agent's **continuation value**  $W_t$ evolves according to:

$$
dW_t = r(W_t - u(C_t) + h(A_t)) dt + r \, y(W_t) \, (dX_t - A_t dt)
$$

where:

-  $C_t$  is the agent's consumption,
-  $A_t$ is the agent's effort,
-  $X_t$ is the **stochastic output process**, following:

$$
dX_t = A_t dt + \sigma dB_t
$$

with Brownian motion $B_t$ and volatility $\sigma$.


# Principal's Hamilton-Jacobi-Bellman  Equation

The HJB equation for the principal's profit function $F(W)$ is:
$$
r F(W) = \max_{a > 0, c} \left\{ r(a - c) + F'(W) r(W - u(c) + h(a)) + \frac{1}{2} F''(W) r^2 \gamma(a)^2 \sigma^2 \right\}
$$

where:

$$
dX_t = A_t dt + \sigma dB_t
$$

- $r(a - c)$ is the **instantaneous profit flow** of the principal,
- $F'(W) r(W - u(c) + h(a))$ accounts for how the agent’s continuation value changes due to effort and consumption,
- $\frac{1}{2} F''(W) r^2 \gamma(a)^2 \sigma^2$ captures the impact of volatility in the contract.

## Parameter values  and Functional forms

- $r = 0.1$ is the **discount rate**,
- $\sigma = 1.0$ is the **volatility of output process**,
- $u(C) = \sqrt{C}$ is the agent's **utility function**, 
- $h(A) = 0.5 A^2 + 0.4 A$ is the **effort cost function**.


##  Profits from retiring the agent
To retire the agent with value $u(c)$, the principal can offers him constant $c$ and allows him to choose zero effort. The profits from this for retiring are: 
$$
F_0(u(c))=-c
$$
As there is no effort, the continuation value is the same as the agent's utility function $W_t=U_t$, meaning that:
$$
F_0(W)=-W^2
$$


## **Boundary Conditions & Smooth Pasting**

The function $F(W)$ must satisfy the following conditions:

1. **Lower boundary condition** (zero profit at zero continuation value):
   $$
   F(0) = 0
   $$

2. **Retirement boundary condition** (profits from retiring the agent):
   $$
   F(W_{gp})=-W_{gp}^2
   $$

3. **Smooth pasting condition** (ensuring differentiability at retirement):
   $$
   F'(W_{gp}) = -2 W_{gp}
   $$

# Solution Method
As solving method usually require transforming second-order ODEs into a first-orde ODE, we rewrite the HJB equation as:
$$
F''(W) = \min_{a > 0, c} \frac{F(W) - a + c - F'(W)(W - u(c) + h(a))}{r \gamma (a)^2 \sigma^2 / 2}
$$

In the code below we use shooting methods for solving the model.

# Code For Figure 1

```{python}
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from scipy.integrate import solve_ivp
from scipy.optimize import minimize, fsolve

#TODO alternatives to find a_star that depends on F, Fp, c or W?

# Parameters and lambda function
r = 0.1      # discount rate
sigma = 1.0  # volatility
u = lambda c: np.sqrt(c)  # Agent's utility function
h = lambda a: 0.5*a**2 + 0.4*a  # Effort cost function
gamma = lambda a: a + 0.4  # Effort cost function
c_star = lambda Fp: 0 if Fp >= 0 else minimize(lambda c: c + Fp*u(c), 0.5, bounds=[(0.0, 2.0)], tol=1e-12).x[0]
a_star = lambda F, Fp, c, W: minimize(lambda a: - (gamma(a)*a - h(a)), 0.5, bounds=[(0.0, 1)], tol=1e-12).x[0]

def F_ode(W: float, Y: np.array) -> np.array:
    """
    Y[0] = F(W),  Y[1] = F'(W).
    Computes F''(W) from the rearranged HJB equation:
    
    F''(W) = 2 * [F(W) - a + c - F'(W)*(W - u(c) + h(a))]
             ---------------------------------------------
                    r * sigma^2 * (h'(a))^2
    """
    F, Fp = Y
    c = c_star(Fp)
    a = a_star(F, Fp, c, W)
    gamma_star = gamma(a)
    drift = W - u(c) + h(a)
    F_pp = (F - a + c - Fp*drift) / (0.5*r*(sigma**2)*(gamma_star**2))
    return [Fp, F_pp]

def shooting(Fp_guess, return_sol=False):
    """
    First: Given a candidate for Fprime(0), integrate the ODE frontward
    from W=0 to 1.2 (as in the paper), using the boundary conditions at retirement:
    F(0)=0,  F(W_gp) = -W_gp^2,    F'(W_gp) = -2*W_gp.
    
    Second: for each Fp(0),  find W_gp, by finding the first case where  F'(W_gp) = -2*W_gp.
    
    Third: find the Fp(0) such that its W_gp associated meet the condition F(W_gp) = -W_gp^2
    """
    Fp_guess = float(Fp_guess)
    w_grid = np.linspace(0, 1.2, 200)  
    # First:     
    sol = solve_ivp(F_ode,[w_grid[0],w_grid[-1]],  y0=[0,Fp_guess], method='RK45', t_eval=w_grid) # "Lower Boundary Condition" is in y0[0]=0, meaning F(0)=0.
    # Second: Smooth-Pasting Condition, select the first sol.t (=W) where F'(W_gp) = -2*W_gp
    d=sol.y[1,1:] + 2*sol.t[1:]
    idx = np.argmin(np.abs(d))
    idx = idx+1
    W_gp = sol.t[idx]
    # Third: Retirement (Upper) Boundary Condition: compute a loss function for the condition F_Wgp = -W_gp**2
    F0_val = sol.y[0,idx] + W_gp**2
    # return the solution
    if return_sol:
        return sol, W_gp
    return float(F0_val)

# root finding for Fp using an initial guess based on the original plot (fp=0.5)
root = fsolve(shooting, 0.5, xtol=1e-12)

# solve the ODE with the optimal Fp(0)
sol, W_gp = shooting(root[0], return_sol=True)

# Plot the results
F_W = sol.y[0]
Fp_W = sol.y[1]
W_vals = sol.t
c_vals, a_vals, drift_vals = [], [], []
for W, F, Fp in zip(W_vals, F_W, Fp_W):
    c = c_star(Fp)
    a = minimize(
        lambda a: (F - a + c - Fp*(W - u(c) + h(a))) / (r*gamma(a)**2*sigma**2/2),
        0.5, bounds=[(0.0, 1)]
    ).x[0]
    c_vals.append(c)
    a_vals.append(a)
    drift_vals.append(r*(W - u(c) + h(a)))

c_vals, a_vals, drift_vals = map(np.array, (c_vals, a_vals, drift_vals))

F0 = -W_vals**2
# Create a figure with two columns, left is wide, right is narrower
fig = plt.figure(figsize=(8, 6))
gs = gridspec.GridSpec(nrows=1, ncols=2, width_ratios=[2.5, 1])

# --- LEFT PLOT (Profit) ---
ax_left = fig.add_subplot(gs[0])
ax_left.plot(W_vals, F_W, label='F(W)')
ax_left.plot(W_vals, F0, label='F₀(W)')
ax_left.axvline(W_gp, color='red', ls='--', label='W_gp')
ax_left.set_xlabel('W')
ax_left.set_ylabel('Profit')
ax_left.legend()
ax_left.set_title('Principal’s Profit')

# --- RIGHT COLUMN: three stacked plots ---
gs_right = gridspec.GridSpecFromSubplotSpec(3, 1, subplot_spec=gs[1],
                                            hspace=0.4)
# Effort subplot
ax_eff = fig.add_subplot(gs_right[0])
ax_eff.plot(W_vals, a_vals)
ax_eff.set_ylabel('Effort a(W)')
ax_eff.axvline(W_gp, color='red', ls='--')
ax_eff.set_ylim([0, 1])  # adjust if you want

# Consumption subplot
ax_cons = fig.add_subplot(gs_right[1])
ax_cons.plot(W_vals, c_vals)
ax_cons.set_ylabel('Consumption c(W)')
ax_cons.axvline(W_gp, color='red', ls='--')
ax_cons.set_ylim([0, 1])  # adjust as needed

# Drift subplot
ax_dr = fig.add_subplot(gs_right[2])
ax_dr.plot(W_vals, drift_vals)
ax_dr.set_ylabel('Drift of W')
ax_dr.set_xlabel('W')
ax_dr.axvline(W_gp, color='red', ls='--')

plt.tight_layout()
plt.show()
```
